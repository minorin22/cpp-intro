(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{216:function(s,a,t){"use strict";t.r(a);var e=t(0),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"cプリプロセッサー"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cプリプロセッサー"}},[s._v("#")]),s._v(" Cプリプロセッサー")]),s._v(" "),t("p",[s._v("CプリプロセッサーはC++がC言語から受け継いだ機能だ。CプリプロセッサーはソースコードをC++としてパースする前に、テキストをトークン単位で変形する処理のことだ。この処理はソースファイルをC++としてパースする前処理として行われる。CプリプロセッサーはC++ではなく別言語として認識すべきで、そもそもプログラミング言語ではなくマクロ言語だ。")]),s._v(" "),t("p",[s._v("C++ではCプリプロセッサーが広く使われており、今後もしばらくは使われるだろう。読者がC++で書かれた既存のコードを読むとき、Cプリプロセッサーは避けて通れない。Cプリプロセッサーはいずれ廃止したい機能ではあるが、C++はいまだに廃止できていない。")]),s._v(" "),t("p",[s._v("Cプリプロセッサーはプリプロセッシングディレクティブ(preprocessing directive)を認識し、トークン列を処理する。ディレクティブはソースファイルの文頭に文字"),t("code",[s._v("#")]),s._v("から始まり、改行文字で終わる。"),t("code",[s._v("#")]),s._v("とディレクティブの間に空白文字を入れてもよい。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" NOSPACE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#    "),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" SPACE")]),s._v("\n")])])]),t("h2",{attrs:{id:"includeディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#includeディレクティブ"}},[s._v("#")]),s._v(" #includeディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#include")]),s._v("は指定したファイルの内容をその場に挿入する。本質的にはコピペだ。C++では"),t("code",[s._v("#include")]),s._v("はライブラリを利用するのに使われる。")]),s._v(" "),t("p",[t("code",[s._v("#include")]),s._v("は以下のいずれかの文法を持つ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<ヘッダーファイルパス>")]),s._v(" 改行文字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ヘッダーファイルパス"')]),s._v(" 改行文字")]),s._v("\n")])])]),t("p",[t("code",[s._v("#include")]),s._v("は指定したファイルパスのファイルの内容をその場所に挿入する。このファイルをヘッダーファイルという。"),t("code",[s._v("<>")]),s._v("によるファイルパスは、標準ライブラリやシステムのヘッダーファイルを格納したディレクトリーからヘッダーファイルを探す。"),t("code",[s._v('""')]),s._v("によるファイルパスは、システム以外のディレクトリーからもヘッダーファイルを探す。例えばカレントディレクトリーなどだ。")]),s._v(" "),t("p",[s._v("例えば、以下のようなヘッダーファイル"),t("code",[s._v("foo.h")]),s._v("があり、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// foo.h")]),s._v("\nfoo foo foo\n")])])]),t("p",[s._v("以下のようなソースファイル"),t("code",[s._v("bar.cpp")]),s._v("がある場合、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bar.cpp")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo.h"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end bar.cpp")]),s._v("\n")])])]),t("p",[t("code",[s._v("bar.cpp")]),s._v("をCプリプロセッサーにかけると、以下のようなソースファイルが出力される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bar.cpp")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// foo.h")]),s._v("\nfoo foo foo\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end bar.h")]),s._v("\n")])])]),t("p",[s._v("このソースファイルはC++のソースファイルとしてはエラーとなるが、Cプリプロセッサーは単純にトークン列で分割したテキストファイルとしてソースファイルを処理するため、Cプリプロセッサーとしてはエラーにはならない。")]),s._v(" "),t("p",[s._v("冒頭で述べたように、"),t("code",[s._v("#include")]),s._v("の本質はコンパイラーによるコピペである。あるテキストファイルの内容をその場に挿入するコピペ機能を提供する。")]),s._v(" "),t("p",[t("code",[s._v("#include")]),s._v("は、ほかの言語でモジュール、importなどと呼ばれている機能を簡易的に提供する。C++の標準ライブラリを使うには、"),t("code",[s._v("<iostream>")]),s._v("や"),t("code",[s._v("<string>")]),s._v("や"),t("code",[s._v("<vector>")]),s._v("のようなヘッダーファイルを"),t("code",[s._v("#include")]),s._v("する必要がある。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// iostreamライブラリを使う")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// stringライブラリを使う")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<string>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// <string>のライブラリ")]),s._v("\n    std"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("string "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("s")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// iostreamのライブラリ")]),s._v("\n    std"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("すでに述べたように"),t("code",[s._v("#include")]),s._v("はファイルの内容をその場に挿入するだけであり、ほかの言語にあるモジュールのための高級な機能ではない。本書を執筆時点で規格策定中のC++20では、より高級なモジュール機能を追加する予定がある。")]),s._v(" "),t("p",[s._v("同じヘッダーファイルを複数回"),t("code",[s._v("#include")]),s._v("すると、当然複数回挿入される。")]),s._v(" "),t("p",[s._v("以下のような"),t("code",[s._v("val.h")]),s._v("を、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("以下のように複数回"),t("code",[s._v("#include")]),s._v("すると、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"val.h"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"val.h"')])]),s._v("\n")])])]),t("p",[s._v("以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("これは"),t("code",[s._v("val")]),s._v("の定義が重複しているためエラーとなる。")]),s._v(" "),t("p",[s._v("しかし、ヘッダーファイルを一度しか"),t("code",[s._v("#include")]),s._v("しないようにするのは困難だ。なぜならば、ヘッダーファイルはほかのヘッダーファイルから間接的に"),t("code",[s._v("#include")]),s._v("されることもあるからだ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lib_f.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"val.h"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lib_g.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"val.h"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main.cpp")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lib_f.h"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lib_g.h"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("この"),t("code",[s._v("main.cpp")]),s._v("をCプリプロセッサーにかけると以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main.cpp")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lib_f.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lib_g.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("これは"),t("code",[s._v("val")]),s._v("の定義が重複しているためエラーとなる。")]),s._v(" "),t("p",[s._v("この問題に対処するためには、複数回"),t("code",[s._v("#include")]),s._v("されると困るヘッダーファイルでは、インクルードガード(include guard)と呼ばれている方法を使う。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// val.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" INCLUDE_GUARD_HEADER_VAL_H")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" INCLUDE_GUARD_HEADER_VAL_H")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" val "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("このように記述した"),t("code",[s._v("val.h")]),s._v("を複数回"),t("code",[s._v("#include")]),s._v("しても、最初の"),t("code",[s._v("ifndef")]),s._v("のみがコンパイル対象になるため、問題は起こらない。")]),s._v(" "),t("p",[s._v("インクルードガードは以下の様式を持つ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" 十分にユニークなマクロ名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" 十分にユニークなマクロ名 ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重複してコンパイルされたくないコードをここに書く")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[t("code",[s._v("十分にユニークなマクロ名")]),s._v("は全ソースファイル中で衝突しないそのヘッダーに固有のマクロ名を使う。慣習的に推奨される方法としてはすべて大文字を使い、十分に長いマクロ名にすることだ。")]),s._v(" "),t("h2",{attrs:{id:"define"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#define"}},[s._v("#")]),s._v(" #define")]),s._v(" "),t("p",[t("code",[s._v("#define")]),s._v("はマクロ置換を行う。マクロにはオブジェクト風マクロ(object-like macro)と関数風マクロ(function-like macro)がある。風というのは、マクロはオブジェクトでも関数でもないからだ。ただ、文法上オブジェクトや関数の似ているだけで、実態はトークン列の愚直な置換だ。")]),s._v(" "),t("h3",{attrs:{id:"オブジェクト風マクロ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#オブジェクト風マクロ"}},[s._v("#")]),s._v(" オブジェクト風マクロ")]),s._v(" "),t("p",[s._v("オブジェクト風マクロの文法は以下のとおり。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" マクロ名 置換リスト　改行文字")]),s._v("\n")])])]),t("p",[t("code",[s._v("#define")]),s._v("以降の行では、マクロ名が置換リストに置き換わる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" ONE             1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" ONE_PLUS_ONE    ONE + ONE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" GNU GNU's is NOT UNIX")]),s._v("\n\nONE\nONE_PLUS_ONE\n")])])]),t("p",[s._v("これをプリプロセスすると以下のソースコードになる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("マクロ名"),t("code",[s._v("ONE")]),s._v("は"),t("code",[s._v("1")]),s._v("に置換される。")]),s._v(" "),t("p",[s._v("マクロ名"),t("code",[s._v("ONE_PLUS_ONE")]),s._v("は"),t("code",[s._v("ONE + ONE")]),s._v("に置換される。置換された結果に別のマクロ名があれば、そのマクロ名も置換される。")]),s._v(" "),t("p",[s._v("あるマクロ名を置換した結果、そのマクロ名が現れても再帰的に置換されることはない。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" GNU GNU's NOT UNIX!")]),s._v("\n\nGNU\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("GNU"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("'")]),s._v("s NOT UNIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])])]),t("p",[s._v("マクロ名"),t("code",[s._v("GNU")]),s._v("を展開するとトークン`GNU'が現れるが、これは置換されたマクロ名と同じなので、再帰的に置換されることはない。")]),s._v(" "),t("h3",{attrs:{id:"関数風マクロ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#関数風マクロ"}},[s._v("#")]),s._v(" 関数風マクロ")]),s._v(" "),t("p",[s._v("関数風マクロの文法は以下のとおり。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" マクロ名( 識別子リスト ) 置換リスト 改行文字")]),s._v("\n")])])]),t("p",[s._v("関数風マクロはあたかも関数のように記述できる。関数風マクロに実引数として渡したトークン列は、置換リスト内で仮引数としての識別子で参照できる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" NO_ARGUMENT()           No argument")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" ONE_ARGUMENT( ARG )     begin ARG end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MAKE_IT_DOUBLE( ARG )   ONE_ARGUMENT( ARG ARG )")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NO_ARGUMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ONE_ARGUMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" foo bar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAKE_IT_DOUBLE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" foo bar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("No argument\nbegin foo bar end\nbegin foo bar foo bar end\n")])])]),t("p",[s._v("複数の引数を取るマクロへの実引数は、カンマで区切られたトークン列を渡す。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" TWO( A, B ) A B")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" THREE( A, B, C ) C B A")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TWO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("THREE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("ただし、括弧で囲まれたトークン列の中にあるカンマは、マクロの実引数の区切りとはみなされない。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MACRO( A ) A")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MACRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h3",{attrs:{id:"va-args-可変長引数マクロ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#va-args-可変長引数マクロ"}},[s._v("#")]),s._v(" "),t("code",[s._v("__VA_ARGS__")]),s._v("(可変長引数マクロ)")]),s._v(" "),t("p",[t("code",[s._v("#define")]),s._v("の識別子リストを"),t("code",[s._v("...")]),s._v("だけにしたマクロは、可変長引数マクロになる。このときマクロの実引数のトークン列は、置換リストの中で"),t("code",[s._v("__VA_ARGS__")]),s._v("として参照できる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MACRO(...) __VA_ARGS__")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MACRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" You can write "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" even "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("You can write "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" even "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])]),t("p",[s._v("カンマも含めてすべてのトークン列がそのまま"),t("code",[s._v("__VA_ARGS__")]),s._v("で参照できる。")]),s._v(" "),t("p",[s._v("可変長引数マクロの識別子リストに仮引数と"),t("code",[s._v("...")]),s._v("を書いたマクロの置換リストでは、仮引数の数だけの実引数は仮引数で参照され、残りが"),t("code",[s._v("__VA_ARGS__")]),s._v("で参照される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MACRO( X, Y, Z, ... ) X Y Z and __VA_ARGS__")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MACRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n")])])]),t("p",[t("code",[s._v("X")]),s._v(", "),t("code",[s._v("Y")]),s._v(", "),t("code",[s._v("Z")]),s._v("にそれぞれ"),t("code",[s._v("1")]),s._v(", "),t("code",[s._v("2")]),s._v(", "),t("code",[s._v("3")]),s._v("が入り、"),t("code",[s._v("__VA_ARGS__")]),s._v("には"),t("code",[s._v("4")]),s._v(", "),t("code",[s._v("5")]),s._v(", "),t("code",[s._v("6")]),s._v("が入る。")]),s._v(" "),t("h3",{attrs:{id:"va-opt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#va-opt"}},[s._v("#")]),s._v(" "),t("code",[s._v("__VA_OPT__")])]),s._v(" "),t("p",[t("code",[s._v("__VA_OPT__")]),s._v("は可変長引数マクロで"),t("code",[s._v("__VA_ARGS__")]),s._v("にトークン列が渡されたかどうかで置換結果を変えることができる。")]),s._v(" "),t("p",[t("code",[s._v("__VA_OPT__")]),s._v("は可変引数マクロの置換リストでのみ使える。"),t("code",[s._v("__VA_OPT__(content)")]),s._v("は"),t("code",[s._v("__VA_ARGS__")]),s._v("にトークンがない場合はトークンなしに置換され、トークンがある場合はトークン列"),t("code",[s._v("content")]),s._v("に置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MACRO( X, ... ) f( X __VA_OPT__(,) __VA_ARGS__ )")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MACRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MACRO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[t("code",[s._v("MACRO(1)")]),s._v("は"),t("code",[s._v("X")]),s._v("が"),t("code",[s._v("1")]),s._v("になり、"),t("code",[s._v("__VA_ARGS__")]),s._v("にはトークンがないので、"),t("code",[s._v("__VA_OPT__(,)")]),s._v("は空に置換される。結果として"),t("code",[s._v("f(1)")]),s._v("となる。")]),s._v(" "),t("p",[t("code",[s._v("MACRO(1,2)")]),s._v("は、"),t("code",[s._v("X")]),s._v("が"),t("code",[s._v("1")]),s._v("になり、"),t("code",[s._v("__VA_ARGS__")]),s._v("にはトークン"),t("code",[s._v("2")]),s._v("が入るので、"),t("code",[s._v("__VA_OPT__(,)")]),s._v("は"),t("code",[s._v(",")]),s._v("に置換される。結果として"),t("code",[s._v("f(1,2)")]),s._v("となる。")]),s._v(" "),t("p",[t("code",[s._v("__VA_OPT__")]),s._v("は"),t("code",[s._v("__VA_ARGS__")]),s._v("に実引数となるトークン列がなければ空に置換されるので、このようにトークン列の有無によってカンマなどの文法上必須のトークン列の有無を切り替えたい場合に使うことができる。")]),s._v(" "),t("h3",{attrs:{id:"演算子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演算子"}},[s._v("#")]),s._v(" #演算子")]),s._v(" "),t("p",[t("code",[s._v("#")]),s._v("はマクロ実引数を文字列リテラルにする。")]),s._v(" "),t("p",[t("code",[s._v("#")]),s._v("は関数風マクロの置換リストの中のみで使うことができる。"),t("code",[s._v("#")]),s._v("は関数風マクロの仮引数の識別子の直前に書くことができる。"),t("code",[s._v("#")]),s._v("が直前に書かれた識別子は、マクロ実引数のトークン列の文字列リテラルになる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" STRING( X ) # X")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("STRING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" hello "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("STRING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" hello world "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),t("p",[s._v("また、可変長マクロと組み合わせた場合、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" STRING( ... ) # __VA_ARGS__")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("STRING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("STRING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" hello"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("world "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello,world"')]),s._v("\n")])])]),t("h3",{attrs:{id:"演算子-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演算子-2"}},[s._v("#")]),s._v(" ##演算子")]),s._v(" "),t("p",[t("code",[s._v("##")]),s._v("はマクロ実引数の結合を行う。")]),s._v(" "),t("p",[t("code",[s._v("##")]),s._v("は関数風マクロの置換リストの中にしか書けない。"),t("code",[s._v("##")]),s._v("は両端にマクロの仮引数の識別子を書かなければならない。"),t("code",[s._v("##")]),s._v("は両端の識別子の参照するマクロ実引数のトークン列を結合した置換を行う。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" CONCAT( A, B ) A ## B")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CONCAT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CONCAT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" aaa bbb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ccc ddd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("foobar\naaa bbbccc ddd\n")])])]),t("p",[s._v("結合した結果のトークンはさらにマクロ置換の対象となる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" CONCAT( A, B ) A ## B")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" FOOBAR hello")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CONCAT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" FOO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" BAR "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("hello\n")])])]),t("p",[t("code",[s._v("CONCAT(FOO,BAR)")]),s._v("は"),t("code",[s._v("FOOBAR")]),s._v("に置換され、"),t("code",[s._v("FOOBAR")]),s._v("という名前のマクロ名があるためにさらに"),t("code",[s._v("hello")]),s._v("に置換される。")]),s._v(" "),t("h3",{attrs:{id:"複数行の置換リスト"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#複数行の置換リスト"}},[s._v("#")]),s._v(" 複数行の置換リスト")]),s._v(" "),t("p",[t("code",[s._v("#define")]),s._v("ディレクティブの置換リストは複数行に渡って書くことができない。これは文法上の制約によるものだ。"),t("code",[s._v("#define")]),s._v("ディレクティブは改行文字で終端される。")]),s._v(" "),t("p",[s._v("しかし、関数やクラスを生成するような複雑なマクロは、複数行に分けて書きたい。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" LIST_NAME2( PREFIX, TYPE ) PREFIX ## TYPE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" LIST_NAME( TYPE ) LIST_NAME2( list_, TYPE )")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" DEFINE_LIST( TYPE ) struct LIST_NAME(TYPE){TYPE value ;LIST_NAME(TYPE) * prev ;LIST_NAME(TYPE) * next ;} ; ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DEFINE_LIST")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DEFINE_LIST")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("この場合、行末にバックスラッシュに続けて改行を書くと、バックスラッシュと改行がプリプロセッサーによって削除される。")]),s._v(" "),t("p",[s._v("上の例は以下のように、プリプロセッサーとしては比較的わかりやすく書くことができる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" LIST_NAME2( PREFIX, TYPE ) PREFIX ## TYPE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" LIST_NAME( TYPE ) LIST_NAME2( list_, TYPE )")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" DEFINE_LIST( TYPE )\\\nstruct LIST_NAME(TYPE)\\\n{\\\n    TYPE value ;\\\n    LIST_NAME(TYPE) * prev ;\\\n    LIST_NAME(TYPE) * next ;\\\n} ; ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DEFINE_LIST")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DEFINE_LIST")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("C++ではテンプレートがあるために、このようなマクロを書く必要はない。")]),s._v(" "),t("h3",{attrs:{id:"undefディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#undefディレクティブ"}},[s._v("#")]),s._v(" #undefディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#undef")]),s._v("はそれ以前に定義されたマクロを削除する。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" FOO BAR")]),s._v("\nFOO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("undef")]),s._v(" FOO")]),s._v("\nFOO\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("BAR\nFOO\n")])])]),t("h2",{attrs:{id:"条件付きソースファイル選択"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件付きソースファイル選択"}},[s._v("#")]),s._v(" 条件付きソースファイル選択")]),s._v(" "),t("p",[t("code",[s._v("#if")]),s._v(", "),t("code",[s._v("#elif")]),s._v(", "),t("code",[s._v("#else")]),s._v(", "),t("code",[s._v("#endif")]),s._v(", "),t("code",[s._v("#ifdef")]),s._v(", "),t("code",[s._v("#ifndef")]),s._v("は条件付きのソースファイルの選択(conditional inclusion)を行う。これは条件付きコンパイルに近い機能を提供する。")]),s._v(" "),t("h3",{attrs:{id:"プリプロセッサーの定数式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#プリプロセッサーの定数式"}},[s._v("#")]),s._v(" プリプロセッサーの定数式")]),s._v(" "),t("p",[s._v("プリプロセッサーで使える条件式は、C++の条件式と比べてだいぶ制限がある。基本的には整数定数式で、"),t("code",[s._v("true")]),s._v(", "),t("code",[s._v("false")]),s._v("が使えるほか、"),t("code",[s._v("123")]),s._v(", "),t("code",[s._v("1+1")]),s._v(", "),t("code",[s._v("1 == 1")]),s._v(", "),t("code",[s._v("1 < 1")]),s._v("のような式も使える。ただし、識別子はすべてマクロ名として置換できるものは置換され、置換できない識別子は、"),t("code",[s._v("true")]),s._v(", "),t("code",[s._v("false")]),s._v("以外はキーワードも含めてすべて"),t("code",[s._v("0")]),s._v("に置換される。")]),s._v(" "),t("p",[s._v("したがって、プリプロセッサーで以下のように書くと、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" UNDEFINED")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("以下のように書いたものと同じになる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("プリプロセッサーであるので、C++としての"),t("code",[s._v("constexpr")]),s._v("変数や"),t("code",[s._v("constexpr")]),s._v("関数も使えない。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constexpr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" x")]),s._v("\nhello\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("これは以下のように置換される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constexpr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("プリプロセッサーはC++の文法と意味を理解しない。単にトークン列として処理する。")]),s._v(" "),t("p",[s._v("以下の例はエラーになる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("constexpr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" f()")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("なぜならば、"),t("code",[s._v("0()")]),s._v("は整数定数式として合法なコードではないからだ。何度も言うように、プリプロセッサーはC++の文法と意味を理解しない。")]),s._v(" "),t("p",[s._v("プリプロセッサーの定数式では、特殊なマクロ風の式を使うことができる。"),t("code",[s._v("defined")]),s._v("と"),t("code",[s._v("__has_include")]),s._v("だ。")]),s._v(" "),t("p",[t("code",[s._v("defined")]),s._v("は以下の文法を持つ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("defined 識別子\ndefined "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" 識別子 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[t("code",[s._v("defined")]),s._v("は識別子がそれ以前の行で"),t("code",[s._v("#define")]),s._v("でマクロとして定義されていて"),t("code",[s._v("#undef")]),s._v("で取り消されていない場合"),t("code",[s._v("1")]),s._v("になり、それ以外の場合"),t("code",[s._v("0")]),s._v("になる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #if 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" defined MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" MACRO")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #if 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" defined MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("undef")]),s._v(" MACRO")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #if 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" defined MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[t("code",[s._v("__has_include")]),s._v("は以下の文法を持つ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("__has_include "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" ヘッダーファイル名 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n__has_include "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" ヘッダーファイル名 "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n__has_include "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" 文字列リテラル "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n__has_include "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" マクロ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("1番目と2番目は、指定されたヘッダーファイル名がシステムに存在する場合"),t("code",[s._v("1")]),s._v("に、そうでない場合"),t("code",[s._v("0")]),s._v("になる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// <filesystem>の存在を確認してから#includeする")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" __has_include(<filesystem>)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#   "),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<filesystem>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "mylibrary.h"の存在を確認してから#includeする')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(' __has_include("mylibrary.h")')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#   "),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mylibrary.h"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("3番目と4番目は、1番目と2番目が適用できない場合に初めて考慮される。その場合、まず通常通りにプリプロセッサーのマクロ置換が行われる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(' STDIO "stdio.h"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" __has_include( STDIO )")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" STDLIB stdlib.h")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" __has_include( <STDLIB> )")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("h3",{attrs:{id:"ifディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ifディレクティブ"}},[s._v("#")]),s._v(" #ifディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#if")]),s._v("ディレクティブは以下の文法を持つ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 定数式 改行文字")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("もし定数式がゼロの場合、"),t("code",[s._v("#if")]),s._v("と"),t("code",[s._v("#endif")]),s._v("で囲まれたトークン列は処理されない。定数式が非ゼロの場合、処理される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nThis line will be skipped"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 1")]),s._v("\nThis line will be processed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("これをプリプロセスすると以下のようになる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("This line will be processed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),t("p",[t("code",[s._v("#if 0")]),s._v("は処理されないので、"),t("code",[s._v("#endif")]),s._v("までのトークン列は消える。")]),s._v(" "),t("h3",{attrs:{id:"elifディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#elifディレクティブ"}},[s._v("#")]),s._v(" #elifディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#elif")]),s._v("ディレクティブは、C++でいう"),t("code",[s._v("else if")]),s._v("に相当する。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 定数式 改行文字")]),s._v("\n")])])]),t("p",[t("code",[s._v("#elif")]),s._v("ディレクティブは"),t("code",[s._v("#if")]),s._v("ディレクティブと"),t("code",[s._v("#endif")]),s._v("ディレクティブの間に複数書くことができる。"),t("code",[s._v("#elif")]),s._v("のある"),t("code",[s._v("#if")]),s._v("が処理される場合、"),t("code",[s._v("#if")]),s._v("から"),t("code",[s._v("#elif")]),s._v("の間のトークン列が処理される、"),t("code",[s._v("#if")]),s._v("が処理されない場合、"),t("code",[s._v("#elif")]),s._v("が"),t("code",[s._v("#if")]),s._v("と同じように定数式を評価して処理されるかどうかが判断される。"),t("code",[s._v("#elif")]),s._v("が処理される場合、処理されるトークン列は次の"),t("code",[s._v("#elif")]),s._v("もしくは"),t("code",[s._v("#endif")]),s._v("までの間のトークン列になる。")]),s._v(" "),t("p",[s._v("以下の例は、すべて"),t("code",[s._v("YES")]),s._v("のトークンがある行のみ処理される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[s._v("プリプロセスした結果は以下のとおり。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("YES\nYES\nYES\nYES\n")])])]),t("h3",{attrs:{id:"elseディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#elseディレクティブ"}},[s._v("#")]),s._v(" #elseディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#else")]),s._v("ディレクティブはC++でいう"),t("code",[s._v("else")]),s._v("に相当する。")]),s._v(" "),t("p",[t("code",[s._v("#else")]),s._v("ディレクティブは"),t("code",[s._v("#if")]),s._v("ディレクティブと"),t("code",[s._v("#endif")]),s._v("ディレクティブの間に書くことができる。もし"),t("code",[s._v("#if")]),s._v("と"),t("code",[s._v("#elif")]),s._v("ディレクティブが処理されない場合で"),t("code",[s._v("#else")]),s._v("ディレクティブがある場合、"),t("code",[s._v("#else")]),s._v("から"),t("code",[s._v("#endif")]),s._v("までのトークン列が処理される。")]),s._v(" "),t("p",[s._v("以下の例は、"),t("code",[s._v("YES")]),s._v("のトークンがある行のみ処理される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("else")])]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("else")])]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" 0")]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" 1")]),s._v("\nYES\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("else")])]),s._v("\nNO\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("h3",{attrs:{id:"ifdef-ifndefディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ifdef-ifndefディレクティブ"}},[s._v("#")]),s._v(" #ifdef, #ifndefディレクティブ")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifdef")]),s._v(" 識別子")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" 識別子")]),s._v("\n")])])]),t("p",[s._v("は、それぞれ以下と同じ意味になる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" defined 識別子")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" !defined 識別子")]),s._v("\n")])])]),t("p",[s._v("例、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifdef")]),s._v(" MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上と同じ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" defined MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上と同じ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" !defined MACRO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("h2",{attrs:{id:"lineディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lineディレクティブ"}},[s._v("#")]),s._v(" #lineディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#line")]),s._v("ディレクティブはディレクティブの次の行の行番号と、ソースファイル名を変更する。これは人間が使うのではなく、ツールによって生成されることを想定した機能だ。")]),s._v(" "),t("p",[s._v("以下の文法の"),t("code",[s._v("#line")]),s._v("ディレクティブは、"),t("code",[s._v("#line")]),s._v("ディレクティブの次の行の行番号をあたかも数値で指定した行番号であるかのように振る舞わせる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(" 数値 改行文字")]),s._v("\n")])])]),t("p",[s._v("数値として0もしくは2147483647より大きい数を指定した場合の挙動は未定義となる。")]),s._v(" "),t("p",[s._v("以下の例はコンパイルエラーになるが、コンパイルエラーメッセージはあたかも102行目に問題があるかのように表示される。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1行目")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2行目")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(" 100 ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3行目")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 100行目")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 101行目")]),s._v("\nill"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("formed line "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 102行目")]),s._v("\n")])])]),t("p",[s._v("以下の例は"),t("code",[s._v("999")]),s._v("を出力するコードだ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(" 999")]),s._v("\n    std"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("__LINE__")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("以下の文法の"),t("code",[s._v("#line")]),s._v("ディレクティブは、次の行の行番号を数値にした上で、ソースファイル名をソースファイル名にする。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(' 数値 "ソースファイル名" 改行文字')]),s._v("\n")])])]),t("p",[s._v("例、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(' 42 "answer.cpp"')]),s._v("\n")])])]),t("p",[s._v("以下の文法の"),t("code",[s._v("#line")]),s._v("ディレクティブは、プリプロセッサートークン列をプリプロセスし、上の2つの文法のいずれかに合致させる。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(" プリプロセッサートークン列 改行文字")]),s._v("\n")])])]),t("p",[s._v("例、")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" LINE_NUMBER 123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("line")]),s._v(" LINE_NUMBER")]),s._v("\n")])])]),t("h2",{attrs:{id:"errorディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#errorディレクティブ"}},[s._v("#")]),s._v(" #errorディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("#error")]),s._v("ディレクティブはコンパイルエラーを引き起こす。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("error")]),s._v(" 改行文字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("error")]),s._v(" トークン列 改行文字")]),s._v("\n")])])]),t("p",[t("code",[s._v("#error")]),s._v("によるコンパイラーのエラーメッセージには"),t("code",[s._v("#error")]),s._v("のトークン列を含む。")]),s._v(" "),t("p",[t("code",[s._v("#error")]),s._v("の利用例としては、"),t("code",[s._v("#if")]),s._v("と組み合わせるものがある。以下の例は"),t("code",[s._v("CHAR_BIT")]),s._v("が8でなければコンパイルエラーになるソースファイルだ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<climits>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" CHAR_BIT != 8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("error")]),s._v(" CHAR_BIT != 8 implementation is not supported.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])])]),t("p",[t("code",[s._v("#if")]),s._v("が処理されなければ、その中にある"),t("code",[s._v("#error")]),s._v("も処理されないので、コンパイルエラーにはならない。")]),s._v(" "),t("h2",{attrs:{id:"pragma"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[s._v("#")]),s._v(" #pragma")]),s._v(" "),t("p",[t("code",[s._v("#pragma")]),s._v("ディレクティブは実装依存の処理を行う。"),t("code",[s._v("#pragma")]),s._v("はコンパイラー独自の拡張機能を追加する文法として使われている。")]),s._v(" "),t("p",[s._v("文法は以下のとおり。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" プリプロセッサートークン列 改行文字")]),s._v("\n")])])]),t("p",[s._v("C++では属性が追加されたために、"),t("code",[s._v("#pragma")]),s._v("を使う必要はほとんどなくなっている。")]),s._v(" "),t("h2",{attrs:{id:"nullディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nullディレクティブ"}},[s._v("#")]),s._v(" Nullディレクティブ")]),s._v(" "),t("p",[t("code",[s._v("Null")]),s._v("ディレクティブとは何もしないプリプロセッサーディレクティブだ。")]),s._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("# 改行文字\n")])])]),t("p",[s._v("つまり、単に"),t("code",[s._v("#")]),s._v("とだけ書いた行はエラーにはならない。")]),s._v(" "),t("h2",{attrs:{id:"定義済みマクロ名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定義済みマクロ名"}},[s._v("#")]),s._v(" 定義済みマクロ名")]),s._v(" "),t("p",[s._v("いくつかのマクロ名がプリプロセッサーによってあらかじめ定義されている。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("マクロ名                             値              意味")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("code",[s._v("__cplusplus")]),s._v(" "),t("code",[s._v("201703L")]),s._v("         C++17時点での値"),t("br"),s._v("\n将来の規格で増やされる")]),s._v(" "),t("p",[t("code",[s._v("__DATE__")]),s._v(" "),t("code",[s._v('"Mmm dd yyyy"')]),s._v("   ソースファイルがプリプロセスされた日付\n"),t("code",[s._v("Mmm")]),s._v("は月、"),t("code",[s._v("dd")]),s._v("は日、"),t("code",[s._v("yyyy")]),s._v("は年"),t("br"),s._v("\n月の文字列は"),t("code",[s._v("asctime")]),s._v("が生成するものと同じ"),t("br"),s._v("\n日が1桁の場合、"),t("code",[s._v("dd")]),s._v("の最初の文字は空白文字")]),s._v(" "),t("p",[t("code",[s._v("__FILE__")]),s._v("                          文字列リテラル      ソースファイルの名前の文字列リテラル")]),s._v(" "),t("p",[t("code",[s._v("__LINE__")]),s._v("                          整数リテラル        ソースファイルの現在の行番号")]),s._v(" "),t("p",[t("code",[s._v("__STDC_HOSTED__")]),s._v("                   整数リテラル        ホスト実装の場合1"),t("br"),s._v("\nフリースタンディング実装の場合0")]),s._v(" "),t("h2",{attrs:{id:"stdcpp-default-new-alignment-整数リテラル-アライメント"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stdcpp-default-new-alignment-整数リテラル-アライメント"}},[s._v("#")]),s._v(" "),t("code",[s._v("__STDCPP_DEFAULT_NEW_ALIGNMENT__")]),s._v("  整数リテラル        アライメント")])])}),[],!1,null,null,null);a.default=r.exports}}]);