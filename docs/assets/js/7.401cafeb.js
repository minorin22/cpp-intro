(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{214:function(a,s,e){"use strict";e.r(s);var t=e(0),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"c-の実行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-の実行"}},[a._v("#")]),a._v(" C++の実行")]),a._v(" "),e("p",[a._v("プログラミング言語を学ぶには、まず書いたソースコードをプログラムとして実行できるようになることが重要だ。自分が正しく理解しているかどうかを確認するために書いたコードが期待どおりに動くことを確かめてこそ、正しい理解が確認できる。")]),a._v(" "),e("h2",{attrs:{id:"c-の実行の仕組み"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-の実行の仕組み"}},[a._v("#")]),a._v(" C++の実行の仕組み")]),a._v(" "),e("p",[a._v("C++は慣習的に、ソースファイルをコンパイルしてオブジェクトファイルを生成し、オブジェクトファイルをリンクして実行可能ファイルを生成し、実行可能ファイルを直接実行することで実行する言語だ。")]),a._v(" "),e("p",[a._v("ほかの言語では、ソースファイルをそのままパースし、解釈して実行するインタープリター形式の言語が多い。もっとも、いまとなってはソースファイルから中間言語に変換して、VM(Virtual Machine)と呼ばれる中間言語を解釈して実行するソフトウェア上で実行するとか、JIT(Just-In-Time)コンパイルしてネイティブコードを生成して実行するといった実装もあるため、昔のように単純にインタープリター型の言語ということはできなくなっている事情はある。ただし、最終的にJITコンパイルされてネイティブコードが実行される言語でも、コンパイルやコード生成はプログラマーが意識しない形で行われるため、プログラマーはコンパイラーを直接使う必要のない言語も多い。")]),a._v(" "),e("p",[a._v("C++はプログラマーが直接コンパイラーを使い、ソースファイルをプログラムに変換する言語だ。")]),a._v(" "),e("h2",{attrs:{id:"簡単な1つのソースファイルからなるプログラムの実行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#簡単な1つのソースファイルからなるプログラムの実行"}},[a._v("#")]),a._v(" 簡単な1つのソースファイルからなるプログラムの実行")]),a._v(" "),e("p",[a._v("ここでは、典型的なC++のソースファイルをどのようにコンパイルし実行するか、一連の流れを学ぶ。")]),a._v(" "),e("h3",{attrs:{id:"サンプルコード"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#サンプルコード"}},[a._v("#")]),a._v(" サンプルコード")]),a._v(" "),e("p",[a._v("以下のC++のソースファイルは標準出力に"),e("code",[a._v("hello")]),a._v("と出力するものだ。")]),a._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    std"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("コードの詳細な意味はさておくとして、このサンプルコードを使ってC++の実行までの流れを見ていこう。")]),a._v(" "),e("p",[a._v("まずは端末から作業用の適当な名前のディレクトリーを作る。ここでは"),e("code",[a._v("cpp")]),a._v("としておこう。ディレクトリーの作成は"),e("code",[a._v("mkdir")]),a._v("コマンドで行える。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ mkdir cpp\n$ cd cpp\n")])])]),e("p",[a._v("好きなテキストエディターを使って上のサンプルコードをテキストファイルとして記述する。ファイル名は"),e("code",[a._v("hello.cpp")]),a._v("としておこう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ vim hello.cpp\n")])])]),e("p",[a._v("C++のソースファイルの名前は何でもよいが、慣習で使われている拡張子がいくつかある。本書では"),e("code",[a._v(".cpp")]),a._v("を使う。")]),a._v(" "),e("p",[a._v("無事にソースファイルが作成できたかどうか確認してみよう。現在のカレントディレクトリー下のファイルの一覧を表示するには"),e("code",[a._v("ls")]),a._v("、ファイルの内容を表示するには"),e("code",[a._v("cat")]),a._v("を使う。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ ls\nhello.cpp\n$ cat hello.cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << "hello" ;\n}\n')])])]),e("h3",{attrs:{id:"コンパイル"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#コンパイル"}},[a._v("#")]),a._v(" コンパイル")]),a._v(" "),e("p",[a._v("さて、ソースファイルが用意できたならば、いよいよコンパイルだ。")]),a._v(" "),e("p",[a._v("C++のソースファイルから、実行可能ファイルを生成するソフトウェアをC++コンパイラーという。C++コンパイラーとしては、GCC(GNU Compiler Collection)とClang(クラン)がある。使い方はどちらもほぼ同じだ。")]),a._v(" "),e("p",[a._v("GCCを使って先ほどの"),e("code",[a._v("hello.cpp")]),a._v("をコンパイルするには以下のようにする。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -o hello hello.cpp\n")])])]),e("p",[a._v("GCCという名前のC++コンパイラーなのに"),e("code",[a._v("g++")]),a._v("なのは、"),e("code",[a._v("gcc")]),a._v("はC言語コンパイラーの名前としてすでに使われているからだ。この慣習はClangも引き継いでいて、ClangのC++コンパイラーは"),e("code",[a._v("clang++")]),a._v("だ。")]),a._v(" "),e("p",[a._v("サンプルコードを間違いなくタイプしていれば、カレントディレクトリーに"),e("code",[a._v("hello")]),a._v("という実行可能ファイルが作成されるはずだ。確認してみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ls\nhello hello.cpp\n")])])]),e("h3",{attrs:{id:"実行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#実行"}},[a._v("#")]),a._v(" 実行")]),a._v(" "),e("p",[a._v("さて、いよいよ実行だ。通常のOSではカレントディレクトリーが"),e("code",[a._v("PATH")]),a._v("に含まれていないため、実行するにはカレントディレクトリーからパスを指定する必要がある。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ./hello\nhello\n")])])]),e("p",[a._v("上出来だ。初めてのC++プログラムが実行できた。さっそくC++を学んでいきたいところだが、その前にC++プログラミングに必要なツールの使い方を学ぶ必要がある。")]),a._v(" "),e("h2",{attrs:{id:"gcc-c-コンパイラー"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gcc-c-コンパイラー"}},[a._v("#")]),a._v(" GCC: C++コンパイラー")]),a._v(" "),e("p",[a._v("GCCはC++のソースファイルからプログラムを生成するC++コンパイラーだ。")]),a._v(" "),e("p",[a._v("GCCの基本的な使い方は以下のとおり。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("g++ その他のオプション -o 出力するファイル名 ソースファイル名\n")])])]),e("p",[a._v("ソースファイル名は複数指定することができる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -o abc a.cpp b.cpp c.cpp\n")])])]),e("p",[a._v("これについては分割コンパイルの章で詳しく解説する。")]),a._v(" "),e("p",[a._v("コンパイラーはメッセージを出力することがある。コンパイルメッセージには、エラーメッセージと警告メッセージとがある。")]),a._v(" "),e("p",[a._v("エラーメッセージというのは、ソースコードに文法上、意味上の誤りがあるため、コンパイルできない場合に生成される。エラーメッセージはエラーの箇所も教えてくれる。ただし、文法エラーは往々にして適切な誤りの箇所を指摘できないこともある。これは、C++の文法としては正しくないテキストファイルから、妥当なC++であればどういう間違いなのかを推測する必要があるためだ。")]),a._v(" "),e("p",[a._v("警告メッセージというのは、ソースコードにコンパイルを妨げる文法上、意味上の誤りは存在しないが、誤りの可能性が疑われる場合に出力される。")]),a._v(" "),e("h3",{attrs:{id:"コンパイラーオプション"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#コンパイラーオプション"}},[a._v("#")]),a._v(" コンパイラーオプション")]),a._v(" "),e("p",[a._v("GCCのコンパイラーオプションをいくつか学んでいこう。")]),a._v(" "),e("p",[e("code",[a._v("-std=")]),a._v("はC++の規格を選択するオプションだ。C++17に準拠したいのであれば"),e("code",[a._v("-std=c++17")]),a._v("を指定する。読者が本書を読むころには、C++20や、あるいはもっと未来の規格が発行されているかもしれない。常に最新のC++規格を選択するオプションを指定するべきだ。")]),a._v(" "),e("p",[e("code",[a._v("-Wall")]),a._v("はコンパイラーの便利な警告メッセージのほとんどすべてを有効にするオプションだ。コンパイラーによる警告メッセージはプログラムの不具合を未然に発見できるので、このオプションは指定すべきだ。")]),a._v(" "),e("p",[e("code",[a._v("--pedantic-errors")]),a._v("はC++の規格を厳格に守るオプションだ。規格に違反しているコードがコンパイルエラー扱いになる。")]),a._v(" "),e("p",[a._v("これをまとめると、GCCは以下のように使う。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("g++ -std=c++17 -Wall --pedantic-errors -o 出力ファイル名 入力ファイル名\n")])])]),e("p",[a._v("ところで、GCCのオプションはとても多い。すべてを知りたい読者は、以下のようにしてGCCのマニュアルを読むとよい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ man gcc\n")])])]),e("p",[a._v("手元にマニュアルがない場合、GCCのWebサイトにあるオンラインマニュアルも閲覧できる。")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://gcc.gnu.org/"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://gcc.gnu.org/onlinedocs/"),e("OutboundLink")],1)])]),a._v(" "),e("h3",{attrs:{id:"ヘッダーファイルの省略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ヘッダーファイルの省略"}},[a._v("#")]),a._v(" ヘッダーファイルの省略")]),a._v(" "),e("p",[a._v("先ほどのソースコードをもう一度見てみよう。冒頭に以下のような行がある。")]),a._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n")])])]),e("p",[a._v("これは"),e("code",[a._v("#includeディレクティブ")]),a._v("(#include directive)といい、プリプロセッサー(preprocessor)の一部だ。プリプロセッサーについて詳しくは煩雑になるので巻末資料を参照してもらうとして、このコードは"),e("code",[a._v("iostream")]),a._v("ライブラリを使うために必要で、その意味としてはヘッダーファイル"),e("code",[a._v("iostream")]),a._v("の取り込みだ。")]),a._v(" "),e("p",[a._v("C++の標準ライブラリを使うには、ライブラリごとに対応した"),e("code",[a._v("#includeディレクティブ")]),a._v("を書かなければならない。それはあまりにも煩雑なので、本書では標準ライブラリのヘッダーファイルをすべて"),e("code",[a._v("#include")]),a._v("した"),e("code",[a._v("ヘッダーファイル")]),a._v("(header file)を作成し、それを"),e("code",[a._v("#include")]),a._v("することで、"),e("code",[a._v("#include")]),a._v("を書かなくて済むようにする。")]),a._v(" "),e("p",[a._v("そのためにはまず標準ライブラリのヘッダーファイルのほとんどすべてを"),e("code",[a._v("#include")]),a._v("したヘッダーファイル、"),e("code",[a._v("all.h")]),a._v("を作成する。")]),a._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cstddef>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<limits>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<climits>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cfloat>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cstdint>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cstdlib>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<new>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<typeinfo>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<exception>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<initializer_list>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cstdalign>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<stdexcept>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cassert>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cerrno>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<system_error>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<string>")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("if")]),a._v(" __has_include(<string_view>)")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#   "),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<string_view>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("endif")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<array>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<deque>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<forward_list>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<list>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<vector>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<map>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<set>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<unordered_map>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<unordered_set>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<queue>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<stack>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iterator>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<algorithm>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cfenv>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<random>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<numeric>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cmath>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iosfwd>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<ios>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<streambuf>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<istream>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<ostream>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iomanip>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<sstream>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<fstream>")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("if")]),a._v(" __has_include(<filesystem>)")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#   "),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<filesystem>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("endif")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cstdio>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<cinttypes>")])]),a._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<regex>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<atomic>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<thread>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<mutex>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<shared_mutex>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<condition_variable>")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("<future>")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("using")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" std"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("literals "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("このようなヘッダーファイル"),e("code",[a._v("all.h")]),a._v("を作成したあとに、ソースファイルで以下のように書けば、ほかのヘッダーファイルを"),e("code",[a._v("#include")]),a._v("する必要がなくなる。")]),a._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"all.h"')])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// その他のコード")]),a._v("\n")])])]),e("p",[e("code",[a._v("//")]),a._v("から行末まではコメントで、好きなテキストを書くことができる。")]),a._v(" "),e("p",[a._v("しかし、この最初の1行の"),e("code",[a._v("#include")]),a._v("も面倒だ。そこでGCCのオプション"),e("code",[a._v("-include")]),a._v("を使い、"),e("code",[a._v("all.h")]),a._v("を常に"),e("code",[a._v("#include")]),a._v("した扱いにする。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -include all.h -o program main.cpp\n")])])]),e("p",[a._v("このようにすると、"),e("code",[a._v("main.cpp")]),a._v("が以下のコードでもコンパイルできるようになる。")]),a._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// main.cpp")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 面倒な#includeなどなし")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    std"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("これでヘッダーファイルが省略できるようになった。")]),a._v(" "),e("h3",{attrs:{id:"コンパイル済みヘッダー-precompiled-header"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#コンパイル済みヘッダー-precompiled-header"}},[a._v("#")]),a._v(" コンパイル済みヘッダー(precompiled header)")]),a._v(" "),e("p",[a._v("C++はソースファイルをコンパイルする必要がある言語だ。コンパイルには時間がかかる。コンパイルにどれだけ時間がかかっているかを計測するには、以下のようにするとよい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ time g++ -std=c++17 -Wall --pedantic-errors -include all.h -o program main.cpp\n")])])]),e("p",[a._v("どうだろうか。読者の環境にもよるが、知覚できるぐらいの時間がかかっているのではないだろうか。プログラミングの習得にはコードを書いてから実行までの時間が短い方がよい。そこで本格的にC++を学ぶ前に、コンパイル時間を短縮する方法を学ぶ。")]),a._v(" "),e("p",[a._v("プログラムで変更しないファイルを事前にコンパイルしておくと、変更した部分だけコンパイルすればよいので、コンパイル時間の短縮になる。GCCでは、ヘッダーファイルを事前にコンパイルする特別な機能がある。標準ライブラリのヘッダーファイルは変更しないので、事前にコンパイルしておけばコンパイル時間の短縮になる。")]),a._v(" "),e("p",[a._v("事前にコンパイルしたヘッダーファイルのことをコンパイル済みヘッダー(precompiled header)という。")]),a._v(" "),e("p",[a._v("すでに作成した"),e("code",[a._v("all.h")]),a._v("はコンパイル済みヘッダーとするのに適切なヘッダーファイルだ。")]),a._v(" "),e("p",[a._v("コンパイル済みヘッダーファイルを作成するには、ヘッダーファイル単体をGCCに与え、出力するファイルを"),e("code",[a._v("ヘッダーファイル名.gch")]),a._v("とする。ヘッダーファイル名が"),e("code",[a._v("all.h")]),a._v("の場合、"),e("code",[a._v("all.h.gch")]),a._v("となる。")]),a._v(" "),e("p",[a._v("GCCのオプションにはほかのソースファイルをコンパイルするときと同じオプションを与えるほか、ヘッダーファイルがC++で書かれていることを示すオプション"),e("code",[a._v("-x c++-header")]),a._v("を与える。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -std=c++17 -Wall --pedantic-errors -x c++-header -o all.h.gch all.h\n")])])]),e("p",[a._v("こうすると、コンパイル済みヘッダーファイル"),e("code",[a._v("all.h.gch")]),a._v("が生成できる。")]),a._v(" "),e("p",[a._v("GCCはヘッダーファイルを使うときに、同名の"),e("code",[a._v(".gch")]),a._v("ファイルが存在する場合は、そちらをコンパイル済みヘッダーファイルとして使うことで、ヘッダーファイルの処理を省略する。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -std=c++17 -Wall --pedantic-errors -include all.h -o program main.cpp\n")])])]),e("p",[a._v("コンパイル済みヘッダーは1回のコンパイルにつき1つしか使うことができない。そのため、コンパイル済みヘッダーとするヘッダーファイルを定め、そのヘッダーファイル内にほかのヘッダーをすべて記述する。本書ではコンパイル済みヘッダーファイルとする元のヘッダーファイルの名前を"),e("code",[a._v("all.h")]),a._v("とする。")]),a._v(" "),e("p",[a._v("さっそくコンパイル時間の短縮効果を確かめてみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ls\nall.h main.cpp\n$ g++ -std=c++17 -Wall --pedantic-errors -x c++-header -o all.h.gch all.h\n$ ls\nall.h all.h.gch main.cpp\n$ time g++ -std=c++17 -Wall --pedantic-errors -include all.h -o program main.cpp\n")])])]),e("h2",{attrs:{id:"make-ビルドシステム"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-ビルドシステム"}},[a._v("#")]),a._v(" Make: ビルドシステム")]),a._v(" "),e("h3",{attrs:{id:"コンパイルと実行のまとめ"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#コンパイルと実行のまとめ"}},[a._v("#")]),a._v(" コンパイルと実行のまとめ")]),a._v(" "),e("p",[a._v("ここまで、我々はソースファイルをコンパイルして実行可能ファイルを生成し、プログラムを実行する方法について学んできた。これまでに学んできたことを一連のコマンドで振り返ってみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ ls\nall.h main.cpp\n$ cat all.h\n#include <iostream>\n$ cat main.cpp\nint main() { std::cout << "hello"s ; }\n')])])]),e("p",[a._v("まず、カレントディレクトリーには"),e("code",[a._v("all.h")]),a._v("と"),e("code",[a._v("main.cpp")]),a._v("がある。この2つのファイルは実行可能ファイルを生成するために必要なファイルだ。今回、その中身は最小限にしてある。本当の"),e("code",[a._v("all.h")]),a._v("は、実際には前回書いたように長い内容になる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -std=c++17 -Wall --pedantic-errors -x c++-header -o all.h.gch all.h\n$ ls\nall.h all.h.gch main.cpp\n")])])]),e("p",[a._v("次に、ソースファイルのコンパイルを高速化するために、ヘッダーファイル"),e("code",[a._v("all.h")]),a._v("から、コンパイル済みヘッダーファイル"),e("code",[a._v("all.h.gch")]),a._v("を生成する。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ g++ -std=c++17 -Wall --pedantic-errors -include all.h -o program main.cpp\n$ ls\nall.h all.h.gch main.cpp program\n")])])]),e("p",[a._v("プリコンパイル済みヘッダーファイル"),e("code",[a._v("all.h.gch")]),a._v("とC++ソースファイル"),e("code",[a._v("main.cpp")]),a._v("から、実行可能ファイル"),e("code",[a._v("program")]),a._v("を生成する。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ./program\nhello\n")])])]),e("p",[a._v("実行可能ファイル"),e("code",[a._v("program")]),a._v("を実行する。")]),a._v(" "),e("p",[a._v("これで読者はC++のプログラミングを学び始めるにあたって必要なことはすべて学んだ。さっそくC++を学んでいきたいところだが、その前にもう1つ、ビルドシステムを学ぶ必要がある。")]),a._v(" "),e("h3",{attrs:{id:"依存関係を解決するビルドシステム"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依存関係を解決するビルドシステム"}},[a._v("#")]),a._v(" 依存関係を解決するビルドシステム")]),a._v(" "),e("p",[a._v("以上のC++のソースファイルからプログラムを実行するまでの流れは、C++のプログラムとしてはとても単純なものだが、それでも依存関係が複雑だ。")]),a._v(" "),e("p",[a._v("プログラムの実行にあたって最終的に必要なのはファイル"),e("code",[a._v("program")]),a._v("だが、このファイルはGCCで生成しなければならない。ところでGCCでファイル"),e("code",[a._v("program")]),a._v("を生成するには、事前に"),e("code",[a._v("all.h")]),a._v(", "),e("code",[a._v("all.h.gch")]),a._v(", "),e("code",[a._v("main.cpp")]),a._v("が必要だ。"),e("code",[a._v("all.h.gch")]),a._v("は"),e("code",[a._v("all.h")]),a._v("からGCCで生成しなければならない。")]),a._v(" "),e("p",[a._v("一度コンパイルしたプログラムのソースファイルを書き換えて再びコンパイルする場合はどうすればいいだろう。"),e("code",[a._v("main.cpp")]),a._v("だけを書き換えた場合、"),e("code",[a._v("all.h")]),a._v("は何も変更されていないので、コンパイル済みヘッダーファイル"),e("code",[a._v("all.h.gch")]),a._v("の再生成は必要ない。"),e("code",[a._v("all.h")]),a._v("だけを書き換えた場合は、"),e("code",[a._v("all.h.gch")]),a._v("を生成するだけでなく、"),e("code",[a._v("program")]),a._v("も再生成しなければならない。")]),a._v(" "),e("p",[a._v("プログラムのコンパイルには、このような複雑な依存関係の解決が必要になる。依存関係の解決を人間の手で行うのはたいへんだ。例えば読者が他人によって書かれた何千ものソースファイルと、プログラムをコンパイルする手順書だけを渡されたとしよう。手順書に従ってコンパイルをしたとして、ソースファイルの一部だけを変更した場合、いったいどの手順は省略できるのか、手順書から導き出すのは難しい。するとコンパイルを最初からやり直すべきだろうか。しかし、1つのソースファイルのコンパイルに1秒かかるとして、何千ものソースファイルがある場合、何千秒もかかってしまう。たった1つのソースファイルを変更しただけですべてをコンパイルし直すのは時間と計算資源の無駄だ。")]),a._v(" "),e("p",[a._v("この依存関係の問題は、ビルドシステムによって解決できる。本書ではGNU Makeというビルドシステムを学ぶ。読者がこれから学ぶビルドシステムによって、以下のような簡単なコマンドだけで、他人の書いた何千ものソースファイルからなるプログラムがコンパイル可能になる。")]),a._v(" "),e("p",[a._v("何千ものソースファイルから実行可能ファイルを生成したい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\n")])])]),e("p",[a._v("これだけだ。"),e("code",[a._v("make")]),a._v("というコマンド1つでプログラムのコンパイルは自動的に行われる。")]),a._v(" "),e("p",[a._v("何千ものソースファイルのうち、1つのソースファイルだけを変更し、必要な部分だけを効率よく再コンパイルしたい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\n")])])]),e("p",[a._v("これだけだ。"),e("code",[a._v("make")]),a._v("というコマンド1つでプログラムの再コンパイルは自動的に行われる。")]),a._v(" "),e("p",[a._v("ところで、生成される実行可能ファイルの名前はプログラムごとにさまざまだ。プログラムの開発中は、共通の方法でプログラムを実行したい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make run\n")])])]),e("p",[a._v("これでどんなプログラム名でも共通の方法で実行できる。")]),a._v(" "),e("p",[a._v("ソースファイルから生成されたプログラムなどのファイルをすべて削除したい。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make clean\n")])])]),e("p",[a._v("これで生成されたファイルをすべて削除できる。")]),a._v(" "),e("p",[a._v("テキストエディターにはVimを使っているがわざわざVimからターミナルに戻るのが面倒だ。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":make\n")])])]),e("p",[a._v("VimはノーマルモードからMakeを呼び出すことができる。もちろん、"),e("code",[a._v(":make run")]),a._v("や"),e("code",[a._v(":make clean")]),a._v("もできる。")]),a._v(" "),e("h3",{attrs:{id:"依存関係を記述するルール"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依存関係を記述するルール"}},[a._v("#")]),a._v(" 依存関係を記述するルール")]),a._v(" "),e("p",[a._v("依存関係はどのように表現したらいいのだろうか。GNU Makeでは"),e("code",[a._v("Makefile")]),a._v("という名前のファイルの中に、"),e("code",[a._v("ターゲット")]),a._v("(targets)、"),e("code",[a._v("事前要件")]),a._v("(prerequisites)、"),e("code",[a._v("レシピ")]),a._v("(recipes)という3つの概念で依存関係を"),e("code",[a._v("ルール")]),a._v("(rules)として記述する。"),e("code",[a._v("ルール")]),a._v("は以下の文法だ。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ターゲット : 事前要件\n[TAB文字]レシピ\n")])])]),e("p",[a._v("レシピは必ず"),e("code",[a._v("TAB文字")]),a._v("を直前に書かなければならない。スペース文字ではだめだ。これは"),e("code",[a._v("make")]),a._v("の初心者を混乱させる落とし穴の1つとなっている。忘れずに"),e("code",[a._v("TAB文字")]),a._v("を打とう。")]),a._v(" "),e("p",[a._v("問題を簡単に理解するために、以下のような状況を考えよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ls\nsource\n$ cat source > program\n")])])]),e("p",[a._v("この例では、ファイル"),e("code",[a._v("program")]),a._v("を生成するためにはファイル"),e("code",[a._v("source")]),a._v("が必要だ。ファイル"),e("code",[a._v("source")]),a._v("はすでに存在している。")]),a._v(" "),e("p",[e("code",[a._v("ターゲット")]),a._v("は生成されるファイル名だ。この場合"),e("code",[a._v("program")]),a._v("となる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("program : 事前要件\n\tレシピ\n")])])]),e("p",[e("code",[a._v("事前要件")]),a._v("は"),e("code",[a._v("ターゲット")]),a._v("を生成するために必要なファイル名だ。この場合"),e("code",[a._v("source")]),a._v("となる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("program : source\n\tレシピ\n")])])]),e("p",[e("code",[a._v("レシピ")]),a._v("は"),e("code",[a._v("ターゲット")]),a._v("を生成するために必要な動作だ。この場合、"),e("code",[a._v("cat source > program")]),a._v("となる")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("program ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" source\n\tcat source > program\n")])])]),e("p",[a._v("さっそくこのルールを、ファイル"),e("code",[a._v("Makefile")]),a._v("に書き込み、"),e("code",[a._v("make")]),a._v("を呼び出してみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ls\nMakefile source \n$ cat Makefile\nprogram : source\n\tcat source > program\n$ make\ncat source > program\n$ ls\nMakefile program source\n")])])]),e("p",[a._v("これがMakeの仕組みだ。"),e("code",[a._v("ターゲット")]),a._v("の生成に必要な"),e("code",[a._v("事前要件")]),a._v("と、"),e("code",[a._v("ターゲット")]),a._v("を生成する"),e("code",[a._v("レシピ")]),a._v("を組み合わせた"),e("code",[a._v("ルール")]),a._v("で依存関係を記述する。"),e("code",[a._v("make")]),a._v("を実行すると、実行した"),e("code",[a._v("レシピ")]),a._v("が表示される。")]),a._v(" "),e("p",[a._v("もう少しMakeの"),e("code",[a._v("ルール")]),a._v("を追加してみよう。例えばファイル"),e("code",[a._v("source")]),a._v("はあらかじめ存在するのではなく、ファイル"),e("code",[a._v("source01")]),a._v(", "),e("code",[a._v("source02")]),a._v(", "),e("code",[a._v("source03")]),a._v("の中身をこの順番で連結して生成するとしよう。以下のように書ける。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("program ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" source\n\tcat source > program\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("source ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" source01 source02 source03\n\tcat source01 source02 source03 > source\n")])])]),e("p",[a._v("GNU Makeはカレントディレクトリーにあるファイル"),e("code",[a._v("Makefile")]),a._v("の一番上に書かれたルールを実行しようとする。"),e("code",[a._v("program")]),a._v("を生成するには"),e("code",[a._v("source")]),a._v("が必要だが、"),e("code",[a._v("source")]),a._v("の生成には別のルールの実行が必要だ。"),e("code",[a._v("Makefile")]),a._v("はこの依存関係を自動で解決してくれる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ touch source01 source02 source03\n$ ls\nMakefile source01 source02 source03\n$ make\ncat source01 source02 source03 > source\ncat source > program\n$ ls\nMakefile program source source01 source02 source03\n")])])]),e("p",[a._v("すでに"),e("code",[a._v("make")]),a._v("を実行したあとで、もう一度"),e("code",[a._v("make")]),a._v("を実行するとどうなるだろうか。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\nmake: 'program' is up to date.\n")])])]),e("p",[a._v("このメッセージの意味は「"),e("code",[a._v("program")]),a._v("は最新だ」という意味だ。"),e("code",[a._v("make")]),a._v("はファイルのタイムスタンプを調べ、もしファイル"),e("code",[a._v("program")]),a._v("より"),e("code",[a._v("source")]),a._v("のタイムスタンプの方が若い場合、つまり"),e("code",[a._v("program")]),a._v("が変更されたよりもあとに"),e("code",[a._v("source")]),a._v("が変更された場合、"),e("code",[a._v("ルール")]),a._v("を実行する。")]),a._v(" "),e("p",[a._v("試しにファイル"),e("code",[a._v("source02")]),a._v("のタイムスタンプを更新してみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ touch source02\n$ make\ncat source01 source02 source03 > source\ncat source > program\n")])])]),e("p",[a._v("ファイル"),e("code",[a._v("source")]),a._v("は"),e("code",[a._v("事前要件")]),a._v("に"),e("code",[a._v("source02")]),a._v("を含む。"),e("code",[a._v("source02")]),a._v("のタイムスタンプが"),e("code",[a._v("source")]),a._v("より若いので、"),e("code",[a._v("source")]),a._v("が再び生成される。すると、"),e("code",[a._v("source")]),a._v("のタイムスタンプが"),e("code",[a._v("program")]),a._v("のタイムスタンプよりも若くなったので、"),e("code",[a._v("program")]),a._v("も生成される。")]),a._v(" "),e("p",[a._v("もう1つ例を見てみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ touch a b c\n$ ls\na b c Makefile\n")])])]),e("p",[a._v("あるディレクトリーにファイル"),e("code",[a._v("a")]),a._v(", "),e("code",[a._v("b")]),a._v(", "),e("code",[a._v("c")]),a._v("がある。")]),a._v(" "),e("p",[e("code",[a._v("Makefile")]),a._v("は以下の内容になっている。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("D ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" A B C\n\tcat A B C > D\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("A ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" a\n\tcat a > A\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("B ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" b\n\tcat b > B\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("C ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" c\n\tcat c > C\n")])])]),e("p",[a._v("この"),e("code",[a._v("Makefile")]),a._v("を呼び出したときに作られるのはファイル"),e("code",[a._v("D")]),a._v("だ。ファイル"),e("code",[a._v("D")]),a._v("を作るにはファイル"),e("code",[a._v("A")]),a._v(", "),e("code",[a._v("B")]),a._v(", "),e("code",[a._v("C")]),a._v("が必要だ。このファイルはそれぞれファイル"),e("code",[a._v("a")]),a._v(", "),e("code",[a._v("b")]),a._v(", "),e("code",[a._v("c")]),a._v("から生成されるルールが記述してある。")]),a._v(" "),e("p",[a._v("これを"),e("code",[a._v("make")]),a._v("すると以下のようにファイル"),e("code",[a._v("A")]),a._v(", "),e("code",[a._v("B")]),a._v(", "),e("code",[a._v("C")]),a._v(", "),e("code",[a._v("D")]),a._v("が作られる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ ls\na b c Makefile\n$ make\ncat a > A\ncat b > B\ncat c > C\ncat A B C > D\n")])])]),e("p",[a._v("ここで、ファイル"),e("code",[a._v("b")]),a._v("のタイムスタンプだけを更新して"),e("code",[a._v("make")]),a._v("してみよう。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ touch b\n$ make\ncat b > B\ncat A B C > D\n")])])]),e("p",[a._v("ファイル"),e("code",[a._v("b")]),a._v("のタイムスタンプがファイル"),e("code",[a._v("B")]),a._v("より若くなったので、ファイル"),e("code",[a._v("B")]),a._v("がターゲットとなったルールが再び実行される。ファイル"),e("code",[a._v("A")]),a._v(", "),e("code",[a._v("C")]),a._v("のルールは実行されない。そしてファイル"),e("code",[a._v("B")]),a._v("のタイムスタンプがファイル"),e("code",[a._v("D")]),a._v("より若くなったので、ファイル"),e("code",[a._v("D")]),a._v("がターゲットとなったルールが再び実行される。")]),a._v(" "),e("p",[e("code",[a._v("make")]),a._v("により、処理する必要のあるルールだけが部分的に処理されていることがわかる。")]),a._v(" "),e("p",[e("code",[a._v("make")]),a._v("は適切な"),e("code",[a._v("ルール")]),a._v("さえ書けば、依存関係の解決を自動的に行ってくれる。")]),a._v(" "),e("h3",{attrs:{id:"コメント"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#コメント"}},[a._v("#")]),a._v(" コメント")]),a._v(" "),e("p",[e("code",[a._v("Makefile")]),a._v("にはコメントを書くことができる。"),e("code",[a._v("#")]),a._v("で始まる行はコメント扱いされる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# programを生成するルール")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("program ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" source\n\tcat source > program\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# sourceを生成するルール")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("source ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" source01 source02 source03\n\tcat source01 source02 source03 > source\n")])])]),e("h3",{attrs:{id:"変数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#変数"}},[a._v("#")]),a._v(" 変数")]),a._v(" "),e("p",[e("code",[a._v("Makefile")]),a._v("には"),e("code",[a._v("変数")]),a._v("を書くことができる。")]),a._v(" "),e("p",[a._v("変数の文法は以下のとおり。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("variable = foobar\n\ntarget : $(variable)\n")])])]),e("p",[a._v("これは、")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("target : foobar\n")])])]),e("p",[a._v("と書いたものと同じように扱われる。")]),a._v(" "),e("p",[a._v("変数は"),e("code",[a._v("=")]),a._v("の左側に変数名、右側に変数の内容を書く。")]),a._v(" "),e("p",[a._v("変数を使うときは、"),e("code",[a._v("$(変数名)")]),a._v("のように、"),e("code",[a._v("$()")]),a._v("で変数名を包む。")]),a._v(" "),e("h3",{attrs:{id:"自動変数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自動変数"}},[a._v("#")]),a._v(" 自動変数")]),a._v(" "),e("p",[a._v("GNU Makeは便利なことに、いくつかの変数を自動で作ってくれる。")]),a._v(" "),e("h4",{attrs:{id:"ターゲット"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ターゲット"}},[a._v("#")]),a._v(" "),e("code",[a._v("$@")]),a._v(" ターゲット")]),a._v(" "),e("p",[e("code",[a._v("$@")]),a._v("はルールのターゲットのファイル名になる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\techo "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n")])])]),e("p",[a._v("この"),e("code",[a._v("Makefile")]),a._v("を実行すると以下のように出力される。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\necho target\n")])])]),e("h4",{attrs:{id:"最初の事前要件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最初の事前要件"}},[a._v("#")]),a._v(" "),e("code",[a._v("$<")]),a._v(" 最初の事前要件")]),a._v(" "),e("p",[e("code",[a._v("$<")]),a._v("はルールの最初の事前要件のファイル名になる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" A B C\n\techo "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v("\n")])])]),e("p",[a._v("この"),e("code",[a._v("Makefile")]),a._v("を実行すると以下のように出力される。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\necho A\n")])])]),e("h4",{attrs:{id:"すべての事前要件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#すべての事前要件"}},[a._v("#")]),a._v(" "),e("code",[a._v("$^")]),a._v(" すべての事前要件")]),a._v(" "),e("p",[e("code",[a._v("$^")]),a._v("はすべての事前要件のファイル名が空白区切りされたものになる")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" A B C\n\techo "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v("\n")])])]),e("p",[a._v("この"),e("code",[a._v("Makefile")]),a._v("を実行すると以下のように出力される。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\necho A B C\n")])])]),e("h4",{attrs:{id:"自動変数の組み合わせ"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自動変数の組み合わせ"}},[a._v("#")]),a._v(" 自動変数の組み合わせ")]),a._v(" "),e("p",[a._v("例えば"),e("code",[a._v("ターゲット")]),a._v("を生成するために"),e("code",[a._v("事前要件")]),a._v("と"),e("code",[a._v("ターゲット")]),a._v("のファイル名をレシピに書く場合、")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prerequisite\n\tcat prerequisite > target\n")])])]),e("p",[a._v("と書く代わりに、")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prerequisite\n    cat "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v(" > "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n")])])]),e("p",[a._v("と書ける。")]),a._v(" "),e("h3",{attrs:{id:"phonyターゲット"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#phonyターゲット"}},[a._v("#")]),a._v(" PHONYターゲット")]),a._v(" "),e("p",[a._v("PHONYターゲットとは、ファイル名を意味せず、単にレシピを実行するターゲット名としてのみ機能するターゲットのことだ。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("hi ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\techo hi\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("hello ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\techo hello\n")])])]),e("p",[a._v("これを実行すると以下のようになる。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ make\necho hi\nhi\n$ make hi\necho hi\nhi\n$ make hello\necho hello\nhello\n")])])]),e("p",[e("code",[a._v("make")]),a._v("を引数を付けずに実行すると、一番上に書かれたルールが実行される。引数としてターゲットを指定すると、そのターゲットのルールと、依存するルールが実行される。")]),a._v(" "),e("p",[a._v("ただし、ターゲットと同じファイル名が存在すると、ルールは実行されない。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ touch hello\n$ make hello\nmake: 'hello' is up to date.\n")])])]),e("p",[a._v("GNU Makeはこの問題に対処するため、"),e("code",[a._v(".PHONY")]),a._v("ターゲットという特殊な機能がある。これはPHONYターゲットを"),e("code",[a._v(".PHONY")]),a._v("ターゲットの事前要件とすることで、ターゲットと同じファイル名の存在の有無にかかわらずルールを実行させられる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("hello ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\techo hello\n\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(" ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" hello\n")])])]),e("p",[a._v("PHONYターゲットはコンパイルしたプログラムの実行や削除に使うことができる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("hello ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" hello.cpp\n\tg++ -o "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("run ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" hello\n\t./hello\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm -rf ./hello\n\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(" ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" run clean\n")])])]),e("h2",{attrs:{id:"入門用の環境構築"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#入門用の環境構築"}},[a._v("#")]),a._v(" 入門用の環境構築")]),a._v(" "),e("p",[a._v("以上を踏まえて、C++入門用の環境構築をしてこの章のまとめとする。")]),a._v(" "),e("p",[a._v("今回構築する環境のファイル名とその意味は以下のとおり。")]),a._v(" "),e("p",[e("code",[a._v("main.cpp")]),a._v("\n:   C++のコードを書く\n"),e("code",[a._v("all.h")]),a._v("\n:   標準ライブラリのヘッダーファイルを書く\n"),e("code",[a._v("all.h.gch")]),a._v("\n:   コンパイル済みヘッダー\n"),e("code",[a._v("program")]),a._v("\n:   実行可能ファイル\n"),e("code",[a._v("Makefile")]),a._v("\n:   GNU Makeのルールを書く")]),a._v(" "),e("p",[a._v("使い方は以下のとおり。")]),a._v(" "),e("p",[e("code",[a._v("make")]),a._v("\n:   コンパイルする\n"),e("code",[a._v("make run")]),a._v("\n:   コンパイルして実行\n"),e("code",[a._v("make clean")]),a._v("\n:   コンパイル結果を削除")]),a._v(" "),e("p",[a._v("GCCに与えるコンパイラーオプションを変数にまとめる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[a._v("gcc_options "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" -std"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c++17 -Wall --pedantic-error\n")])])]),e("p",[a._v("言語はC++17、すべての警告を有効にし、規格準拠ではないコードはエラーとする。")]),a._v(" "),e("p",[a._v("プログラムをコンパイルする部分は以下のとおり。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("program ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" main.cpp all.h all.h.gch\n\tg++ "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("gcc_options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("-include")]),a._v(" all.h "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v(" -o "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("all.h.gch ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" all.h\n\tg++ "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("gcc_options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -x c++-header -o "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v("\n")])])]),e("p",[a._v("実行可能ファイル"),e("code",[a._v("program")]),a._v("と、コンパイル済みヘッダー"),e("code",[a._v("all.h.gch")]),a._v("をコンパイルするルールだ。")]),a._v(" "),e("p",[a._v("PHONYターゲットは以下のとおり。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("run ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" program\n\t./program\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm -f ./program\n\trm -f ./all.h.gch\n\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(" ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" run clean\n")])])]),e("p",[e("code",[a._v("make")]),a._v("でコンパイル。"),e("code",[a._v("make run")]),a._v("で実行。"),e("code",[a._v("make clean")]),a._v("でコンパイル結果の削除。")]),a._v(" "),e("p",[e("code",[a._v("Makefile")]),a._v("全体は以下のようになる。")]),a._v(" "),e("div",{staticClass:"language-makefile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-makefile"}},[e("code",[a._v("gcc_options "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" -std"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c++17 -Wall --pedantic-errors\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("program ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" main.cpp all.h all.h.gch\n\tg++ "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("gcc_options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("-include")]),a._v(" all.h "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v(" -o "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("all.h.gch ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" all.h\n\tg++ "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("gcc_options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -x c++-header -o "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$<")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("run ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" program\n\t./program\n\n"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm -f ./program\n\trm -f ./all.h.gch\n\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(" ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" run clean\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);